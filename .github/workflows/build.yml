name: Build AutoBSPpackingTool

on:
  workflow_dispatch:
  push:
    branches: [ master, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          9.0.x

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.fsproj', '**/*.vbproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore --verbosity minimal

    - name: Run tests (if any)
      run: |
        if (Test-Path "**/*Tests*.csproj") {
          dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity minimal --logger trx --collect:"XPlat Code Coverage"
        } else {
          Write-Host "No test projects found - skipping tests"
        }
      shell: pwsh
      continue-on-error: true

    - name: Publish application
      if: matrix.configuration == 'Release'
      run: |
        dotnet publish --configuration Release --no-build --output ./publish --self-contained true --runtime win-x64
        
    - name: Create portable package
      if: matrix.configuration == 'Release'
      run: |
        Compress-Archive -Path "./publish/*" -DestinationPath "./AutoBSPpackingTool-${{ github.ref_name }}-win-x64.zip"
      shell: pwsh

    - name: Upload build artifacts
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: AutoBSPpackingTool-${{ github.ref_name }}-win-x64
        path: ./publish/
        retention-days: 30

  release:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Build and publish release
      run: |
        dotnet publish --configuration Release --output ./release --self-contained true --runtime win-x64 -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true

    - name: Create release package
      run: |
        Compress-Archive -Path "./release/*" -DestinationPath "./AutoBSPpackingTool-${{ github.ref_name }}-win-x64.zip"
      shell: pwsh

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./AutoBSPpackingTool-${{ github.ref_name }}-win-x64.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-analysis:
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Run code analysis
      run: |
        dotnet build --configuration Release --verbosity minimal --warnaserror
        
    - name: Security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      if: always()
      continue-on-error: true
      with:
        sarif-file: 'results.sarif'
