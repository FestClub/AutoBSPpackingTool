name: Build AutoBSPpackingTool

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    runs-on: windows-2022  # Ensures .NET Framework support
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Use windows-2022 runner which includes .NET Framework targeting packs
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Setup .NET Framework Developer Pack
      run: |
        # Download and install .NET Framework 4.0 Developer Pack
        $url = "https://download.microsoft.com/download/A/6/7/A678AB47-496B-4907-B3C7-6DFB75AE19C6/dotNetFx40_Full_x86_x64.exe"
        $output = "$env:TEMP\dotNetFx40_Full_x86_x64.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/quiet" -Wait
        
        # Install targeting pack via chocolatey (faster alternative)
        choco install netfx-4.0-devpack -y --force
      shell: pwsh
      continue-on-error: true

    - name: Restore NuGet packages
      run: nuget restore

    - name: Build with MSBuild
      run: |
        msbuild /p:Configuration=${{ matrix.configuration }} /p:Platform="Any CPU" /p:TargetFrameworkVersion=v4.0 /verbosity:minimal
      shell: cmd

    - name: Run tests (if any)
      run: |
        if (Test-Path "**/*Tests*.csproj") {
          # Use MSTest or NUnit runner for .NET Framework tests
          if (Test-Path "packages\MSTest.TestAdapter*") {
            vstest.console.exe **\bin\**\*Tests*.dll
          }
        } else {
          Write-Host "No test projects found - skipping tests"
        }
      shell: pwsh
      continue-on-error: true

    - name: Package application
      if: matrix.configuration == 'Release'
      run: |
        $outputPath = ".\bin\Release"
        $publishPath = ".\publish"
        
        # Create publish directory
        New-Item -ItemType Directory -Force -Path $publishPath
        
        # Copy built files
        Copy-Item -Path "$outputPath\*" -Destination $publishPath -Recurse -Force
        
        # Create ZIP package
        Compress-Archive -Path "$publishPath\*" -DestinationPath ".\AutoBSPpackingTool-${{ github.ref_name }}-win-x64.zip"
      shell: pwsh

    - name: Upload build artifacts
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: AutoBSPpackingTool-${{ github.ref_name }}-win-x64
        path: ./publish/
        retention-days: 30

  release:
    needs: build
    runs-on: windows-2022
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Setup .NET Framework Developer Pack
      run: choco install netfx-4.0-devpack -y --force
      shell: pwsh

    - name: Build release
      run: |
        nuget restore
        msbuild /p:Configuration=Release /p:Platform="Any CPU" /p:TargetFrameworkVersion=v4.0 /verbosity:minimal

    - name: Create release package
      run: |
        $releasePath = ".\bin\Release"
        Compress-Archive -Path "$releasePath\*" -DestinationPath ".\AutoBSPpackingTool-${{ github.ref_name }}-win-x64.zip"
      shell: pwsh

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./AutoBSPpackingTool-${{ github.ref_name }}-win-x64.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
