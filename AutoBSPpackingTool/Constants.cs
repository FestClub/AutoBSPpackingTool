using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using static AutoBSPpackingTool.Util;

namespace AutoBSPpackingTool
{
	public static class Constants
	{
		public static readonly Dictionary<string, KeyParameters> VMT_texture_keys = new Dictionary<string, KeyParameters>(StringComparer.OrdinalIgnoreCase)
		{
			{"$albedo", new (RootFolder.Absent)},
			{"$alphamasktexture", new (RootFolder.Absent)},
			{"$alphatest2_texture", new (RootFolder.Absent)},
			{"$ambientoccltexture", new (RootFolder.Absent)},
			{"$ambientocclusiontexture", new (RootFolder.Absent)},
			{"$anisodirtexture", new (RootFolder.Absent)},
			{"$ao", new (RootFolder.Absent)},
			{"$aomap", new (RootFolder.Absent)},
			{"$aoscreenbuffer", new (RootFolder.Absent)},
			{"$aotexture", new (RootFolder.Absent)},
			{"$backingtexture", new (RootFolder.Absent)},
			{@"$basenormalmap\d*", new (RootFolder.Absent)}, //this key itself may not exist without numbering
			{@"$basetexture\d*", new (RootFolder.Absent)},
			//{"$basetexture2", new (RootFolder.Absent)},
			//{"$basetexture3", new (RootFolder.Absent)},
			//{"$basetexture4", new (RootFolder.Absent)},
			{"$basetexturelow", new (RootFolder.Absent)},
			{"$brdf_integration", new (RootFolder.Absent)}, //original one from the VDC wiki started with bdrf //"these are internal kvs created by vrad during compilation. The user should not manually set these"; left just in case
			{"$blendmodulate", new (RootFolder.Absent)},
			{"$blendmodulatetexture", new (RootFolder.Absent)},
			{"$bloomtexture", new (RootFolder.Absent)},
			{"$blurredtexture", new (RootFolder.Absent)},
			{"$blurtexture", new (RootFolder.Absent)},
			{"$brightness", new (RootFolder.Absent)},
			{"$bumpcompress", new (RootFolder.Absent)},
			{@"$bumpmap\d*", new (RootFolder.Absent)},
			//{"$bumpmap2", new (RootFolder.Absent)},
			{"$bumpmapdetail", new (RootFolder.Absent)},
			{"$bumpmask", new (RootFolder.Absent)},
			{"$bumpstretch", new (RootFolder.Absent)},
			{"$bumptexture", new (RootFolder.Absent)},
			{"$bumpwrinkle", new (RootFolder.Absent)},
			{"$burn_grad", new (RootFolder.Absent)},
			{"$burn_noise", new (RootFolder.Absent)},
			{"$burndetailtexture", new (RootFolder.Absent)},
			{"$camopatterntexture", new (RootFolder.Present, KeyCustomLogic.PreserveExtension)}, //proxy key
			{"$canvas", new (RootFolder.Absent)},
			{"$cbtexture", new (RootFolder.Absent)},
			{"$cloudalphatexture", new (RootFolder.Absent)},
			{"$colorbar", new (RootFolder.Absent)},
			{"$colormasktexture", new (RootFolder.Absent)},
			{"$colorwarp", new (RootFolder.Absent)},
			{"$colorwarptexture", new (RootFolder.Absent)},
			{"$corecolortexture", new (RootFolder.Absent)},
			{"$compress", new (RootFolder.Absent)},
			{"$cont_n_texture", new (RootFolder.Absent)},
			{"$cookietexture", new (RootFolder.Absent)},
			{"$corneatexture", new (RootFolder.Absent)},
			{"$crtexture", new (RootFolder.Absent)},
			{"$csmdepthatlassampler", new (RootFolder.Absent)},
			{"$cutouttexture", new (RootFolder.Absent)},
			{@"$damagetexture\d*", new (RootFolder.Absent)}, //this key itself may not exist without numbering
			//{"$damagetexture1", new (RootFolder.Absent)},
			{"$decalbackingtexture", new (RootFolder.Absent)},
			{"$decalmasktexture", new (RootFolder.Absent)},
			{"$decaltexture", new (RootFolder.Absent)},
			{"$delta", new (RootFolder.Absent)},
			{"$depth_texture", new (RootFolder.Absent)},
			{"$depthtexture", new (RootFolder.Absent)},
			{@"$detail\d*", new (RootFolder.Absent)},
			//{"$detail1", new (RootFolder.Absent)},
			//{"$detail2", new (RootFolder.Absent)},
			{"$detailmodlayer", new (RootFolder.Absent)},
			{"$detailmodlayerbump", new (RootFolder.Absent)},
			{"$detailnormal", new (RootFolder.Absent)},
			{"$diffuse_texture", new (RootFolder.Absent)},
			{"$diffusewarp", new (RootFolder.Absent)},
			{"$dirttexture", new (RootFolder.Absent)},
			{"$displacementmap", new (RootFolder.Absent)},
			{"$dof_depth_texture", new (RootFolder.Absent)},
			{"$dudvmap", new (RootFolder.Absent)},
			{"$dust_texture", new (RootFolder.Absent)},
			{"$effectmaskstexture", new (RootFolder.Absent)},
			{@"$emissiontexture\d*", new (RootFolder.Absent)},
			//{"$emissiontexture2", new (RootFolder.Absent)},
			{"$emissiveblendbasetexture", new (RootFolder.Absent)},
			{"$emissiveblendflowtexture", new (RootFolder.Absent)},
			{"$emissiveblendtexture", new (RootFolder.Absent)},
			{"$endtexture", new (RootFolder.Absent)},
			{"$envmap", new (RootFolder.Absent, KeyCustomLogic.IgnoreEnvCubemap)},
			{@"$envmapmask\d*", new (RootFolder.Absent)},
			//{"$envmapmask2", new (RootFolder.Absent)},
			{"$exposure_texture", new (RootFolder.Absent)},
			{"$exptexture", new (RootFolder.Absent)},
			{"$fbtexture", new (RootFolder.Absent)},
			{"$flashlighttexture", new (RootFolder.Absent)},
			{"$fleshbordertexture1d", new (RootFolder.Absent)},
			{"$fleshcubetexture", new (RootFolder.Absent)},
			{"$fleshinteriornoisetexture", new (RootFolder.Absent)},
			{"$fleshinteriortexture", new (RootFolder.Absent)},
			{"$fleshnormaltexture", new (RootFolder.Absent)},
			{"$fleshsubsurfacetexture", new (RootFolder.Absent)},
			{"$flow_noise_texture", new (RootFolder.Absent)},
			{"$flowbounds", new (RootFolder.Absent)},
			{"$flowmap", new (RootFolder.Absent)},
			{"$fow", new (RootFolder.Absent)},
			{"$fow_height_texture", new (RootFolder.Absent)},
			{"$frame_texture", new (RootFolder.Absent)},
			{"$frametexture", new (RootFolder.Absent)},
			{"$fresnelcolorwarp", new (RootFolder.Absent)},
			{"$fresnelcolorwarptexture", new (RootFolder.Absent)},
			{"$fresnelrangestexture", new (RootFolder.Absent)},
			{"$fresnelwarp", new (RootFolder.Absent)},
			{"$fresnelwarptexture", new (RootFolder.Absent)},
			{"$frontndtexture", new (RootFolder.Absent)},
			{"$glassenvmap", new (RootFolder.Absent)},
			{"$glint", new (RootFolder.Absent)},
			{"$glittercube", new (RootFolder.Absent)},
			{"$glittermask", new (RootFolder.Absent)},
			{"$glitternormal", new (RootFolder.Absent)},
			{"$gradienttexture", new (RootFolder.Absent)},
			{"$grain", new (RootFolder.Absent)},
			{"$grain_texture", new (RootFolder.Absent)},
			{"$grime", new (RootFolder.Absent)},
			{"$grunge", new (RootFolder.Absent)},
			{"$grungetexture", new (RootFolder.Absent)},
			{"$hdrbasetexture", new (RootFolder.Absent)},
			{@"$hdrcompressedtexture\d*", new (RootFolder.Absent)},
			//{"$hdrcompressedtexture0", new (RootFolder.Absent)},
			//{"$hdrcompressedtexture1", new (RootFolder.Absent)},
			//{"$hdrcompressedtexture2", new (RootFolder.Absent)},
			//{"$hdrcompressedtexture3", new (RootFolder.Absent)},
			{"$hdrenvmap", new (RootFolder.Absent)},
			{"$heightmap", new (RootFolder.Absent)},
			{"$holomask", new (RootFolder.Absent)},
			{"$holospectrum", new (RootFolder.Absent)},
			{"$input", new (RootFolder.Absent)},
			{"$input_texture", new (RootFolder.Absent)},
			{"$internal_vignettetexture", new (RootFolder.Absent)},
			{"$iridescentwarp", new (RootFolder.Absent)},
			{"$iris", new (RootFolder.Absent)},
			{"$lightluttexture", new (RootFolder.Absent)},
			{"$lightmap", new (RootFolder.Absent)},
			{"$lightwarptexture", new (RootFolder.Absent)},
			{"$logomap", new (RootFolder.Absent)},
			{@"$maskmap\d*", new (RootFolder.Absent)}, //this key itself may not exist without numbering
			//{"$maskmap1", new (RootFolder.Absent)},
			//{"$maskmap2", new (RootFolder.Absent)},
			{@"$masks\d*", new (RootFolder.Absent)},
			//{"$masks1", new (RootFolder.Absent)},
			//{"$masks2", new (RootFolder.Absent)},
			{"$maskstexture", new (RootFolder.Absent)},
			{"$matcap", new (RootFolder.Absent)},
			{"$material", new (RootFolder.Absent)},
			{"$materialmask", new (RootFolder.Absent)},
			{"$modelmaterial", new (RootFolder.Absent)},
			{"$moss_texture", new (RootFolder.Absent)},
			{@"$mraotexture\d*", new (RootFolder.Absent)},
			//{"$mraotexture2", new (RootFolder.Absent)},
			{"$noise", new (RootFolder.Absent)},
			{"$noise_texture", new (RootFolder.Absent)},
			{"$noisemap", new (RootFolder.Absent)},
			{"$noisetexture", new (RootFolder.Absent)},
			{"$normal_texture", new (RootFolder.Absent)},
			{@"$normalmap\d*", new (RootFolder.Absent)},
			//{"$normalmap2", new (RootFolder.Absent)},
			{"$normaltexture", new (RootFolder.Absent)},
			{"$offsetmap", new (RootFolder.Absent)},
			{"$opacitytexture", new (RootFolder.Absent)},
			{"$originaltexture", new (RootFolder.Absent)},
			{"$paintsplatbubble", new (RootFolder.Absent)},
			{"$paintsplatbubblelayout", new (RootFolder.Absent)},
			{"$paintsplatenvmap", new (RootFolder.Absent)},
			{"$paintsplatnormalmap", new (RootFolder.Absent)},
			{"$painttexture", new (RootFolder.Absent)},
			{@"$parallaxmap\d*", new (RootFolder.Absent)},
			//{"$parallaxmap2", new (RootFolder.Absent)},
			{"$pattern", new (RootFolder.Absent)},
			{"$pattern1", new (RootFolder.Absent)},
			{"$pattern2", new (RootFolder.Absent)},
			{"$phongexponenttexture", new (RootFolder.Absent)},
			{"$phongwarptexture", new (RootFolder.Absent)},
			{"$portalcolortexture", new (RootFolder.Absent)},
			{"$portalmasktexture", new (RootFolder.Absent)},
			{"$postexture", new (RootFolder.Absent)},
			{"$ramptexture", new (RootFolder.Absent)},
			{"$random_texture", new (RootFolder.Absent)},
			{"$reflecttexture", new (RootFolder.Absent)},
			{"$refracttexture", new (RootFolder.Absent)},
			{"$refracttinttexture", new (RootFolder.Absent)},
			{"$sampleoffsettexture", new (RootFolder.Absent)},
			{"$scanlinetexture", new (RootFolder.Absent)},
			{"$scenedepth", new (RootFolder.Absent)},
			{"$screeneffecttexture", new (RootFolder.Absent)},
			{"$selfillummap", new (RootFolder.Absent)},
			{"$selfillummask", new (RootFolder.Absent)},
			{"$selfillumtexture", new (RootFolder.Absent)},
			{"$shadowdepthtexture", new (RootFolder.Absent)},
			{"$sheenmap", new (RootFolder.Absent)},
			{"$sheenmapmask", new (RootFolder.Absent)},
			{"$sidespeed", new (RootFolder.Absent)},
			{"$simpleoverlay", new (RootFolder.Absent)},
			{"$smallfb", new (RootFolder.Absent)},
			{"$solidtexture", new (RootFolder.Absent)},
			{"$sourcemrtrendertarget", new (RootFolder.Absent)},
			{"$specmap_texture", new (RootFolder.Absent)},
			{"$specmasktexture", new (RootFolder.Absent)},
			{@"$spectexture\d*", new (RootFolder.Absent)},
			//{"$spectexture2", new (RootFolder.Absent)},
			//{"$spectexture3", new (RootFolder.Absent)},
			//{"$spectexture4", new (RootFolder.Absent)},
			{"$specular_texture", new (RootFolder.Absent)},
			{"$speculartexture", new (RootFolder.Absent)},
			{"$specularwarp", new (RootFolder.Absent)},
			{"$spherenormal", new (RootFolder.Absent)},
			{"$spitternoisetexture", new (RootFolder.Absent)},
			{"$ssao_texture", new (RootFolder.Absent)},
			{"$startexture", new (RootFolder.Absent)},
			{"$starttexture", new (RootFolder.Absent)},
			{"$staticblendtexture", new (RootFolder.Absent)},
			{"$stitchtexture", new (RootFolder.Absent)},
			{"$stretch", new (RootFolder.Absent)},
			{"$stripetexture", new (RootFolder.Absent)},
			{"$surfacetexture", new (RootFolder.Absent)},
			{"$tdisplacementmap", new (RootFolder.Absent)},
			{"$tex_cube", new (RootFolder.Absent)},
			{@"$texture\d*", new (RootFolder.Absent)},
			//{"$texture1", new (RootFolder.Absent)},
			//{"$texture2", new (RootFolder.Absent)},
			//{"$texture3", new (RootFolder.Absent)},
			//{"$texture4", new (RootFolder.Absent)},
			{"$tintmasktexture", new (RootFolder.Absent)},
			{"$transmatmaskstexture", new (RootFolder.Absent)},
			{"$velocity_texture", new (RootFolder.Absent)},
			{"$vignette_texture", new (RootFolder.Absent)},
			{"$vignette_tile", new (RootFolder.Absent)},
			{"$votexture", new (RootFolder.Absent)},
			{"$warptexture", new (RootFolder.Absent)},
			{"$weartexture", new (RootFolder.Absent)},
			{"$web_mask_texture", new (RootFolder.Absent)},
			{"$worldspaceburn", new (RootFolder.Absent)},
			{"$worldspacetint", new (RootFolder.Absent)},
			{"$worldspacetype", new (RootFolder.Absent)},
			{"$worldspacezone", new (RootFolder.Absent)},
			{"$woundcutouttexture", new (RootFolder.Absent)},
			{"$wrinkle", new (RootFolder.Absent)},
			{"$ytexture", new (RootFolder.Absent)},
			{"%tooltexture", new (RootFolder.Absent)},
			{"bikvideo", new (RootFolder.Present, KeyCustomLogic.PreserveExtension)}, //proxy key
			{"groups", new (RootFolder.Absent)}, //proxy key
			{"texture", new (RootFolder.Absent)} //proxy key
		};
		public static readonly Dictionary<string, KeyParameters> VMT_material_keys = new Dictionary<string, KeyParameters>(StringComparer.OrdinalIgnoreCase)
		{
			{"$bottommaterial", new (RootFolder.Absent)},
			{"$crackmaterial", new (RootFolder.Absent)},
			{"$fallbackmaterial", new (RootFolder.Absent)},
			{"$translucent_material", new (RootFolder.Absent)},
			{"$underwateroverlay", new (RootFolder.Absent)},
			{"include", new (RootFolder.Present, KeyCustomLogic.MustHaveExtension)}
		};
		public static readonly Dictionary<string, KeyParameters> VMF_material_keys = new Dictionary<string, KeyParameters>(StringComparer.OrdinalIgnoreCase)
		{
			{"beamname", new (RootFolder.Absent)},
			{"endsprite", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"fireballsprite", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"firesprite", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"material", new KeyParameters
			{
				default_root_folder = RootFolder.Absent,
				classnames_exceptions = new Dictionary<string, Tuple<RootFolder, KeyCustomLogic>>(StringComparer.OrdinalIgnoreCase)
				{
					{"env_sun", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)}
				}
			}},
			{"model", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"overlaymaterial", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{@"overlayname\d*", new (RootFolder.Absent)}, //this key itself may not exist without numbering
			//{"overlayname1", new (RootFolder.Absent)},
			//{"overlayname2", new (RootFolder.Absent)},
			//{"overlayname3", new (RootFolder.Absent)},
			//{"overlayname4", new (RootFolder.Absent)},
			//{"overlayname5", new (RootFolder.Absent)},
			//{"overlayname6", new (RootFolder.Absent)},
			//{"overlayname7", new (RootFolder.Absent)},
			//{"overlayname8", new (RootFolder.Absent)},
			//{"overlayname9", new (RootFolder.Absent)},
			//{"overlayname10", new (RootFolder.Absent)},
			{"particletrailmaterial", new (RootFolder.Absent)},
			{"point_hud_icon_allies", new (RootFolder.Absent)},
			{"point_hud_icon_axis", new (RootFolder.Absent)},
			{"point_hud_icon_bombed", new (RootFolder.Absent)},
			{"point_hud_icon_neutral", new (RootFolder.Absent)},
			{"point_hud_icon_timercap", new (RootFolder.Absent)},
			{"ropematerial", new (RootFolder.Absent)},
			{"smokematerial", new (RootFolder.Absent)},
			{"smokesprite", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"spriteflash", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"spritename", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"spritesmoke", new (RootFolder.Dynamic, KeyCustomLogic.Sprite)},
			{"startexture", new (RootFolder.Absent)},
			{@"team_base_icon_\d+", new (RootFolder.Absent)},
			//{"team_base_icon_2", new (RootFolder.Absent)},
			//{"team_base_icon_3", new (RootFolder.Absent)},
			{@"team_icon_\d+", new (RootFolder.Absent)},
			//{"team_icon_0", new (RootFolder.Absent)},
			//{"team_icon_2", new (RootFolder.Absent)},
			//{"team_icon_3", new (RootFolder.Absent)},
			{@"team_overlay_\d+", new (RootFolder.Absent)},
			//{"team_overlay_0", new (RootFolder.Absent)},
			//{"team_overlay_2", new (RootFolder.Absent)},
			//{"team_overlay_3", new (RootFolder.Absent)},
			{"texture", new KeyParameters
			{
				default_root_folder = RootFolder.Dynamic,
				default_custom_logic = KeyCustomLogic.Sprite,
				classnames_exceptions = new Dictionary<string, Tuple<RootFolder, KeyCustomLogic>>(StringComparer.OrdinalIgnoreCase)
				{
					{"infodecal", new (RootFolder.Absent, default)},
					{"info_projecteddecal", new (RootFolder.Absent, default)}
				}
			}},
			{"texturename", new (RootFolder.Absent)}
		};
		public static readonly Dictionary<string, KeyParameters> VMF_model_keys = new Dictionary<string, KeyParameters>(StringComparer.OrdinalIgnoreCase)
		{
			{"basepiece", new (RootFolder.Present)},
			{"croc_model", new (RootFolder.Present)},
			{"flag_model", new (RootFolder.Present)},
			{@"flyingpiece\d*", new (RootFolder.Present)}, //this key itself may not exist without numbering
			//{"flyingpiece01", new (RootFolder.Present)},
			//{"flyingpiece02", new (RootFolder.Present)},
			//{"flyingpiece03", new (RootFolder.Present)},
			//{"flyingpiece04", new (RootFolder.Present)},
			{"handsvm", new (RootFolder.Present)},
			{"headcrabmodel", new (RootFolder.Present)},
			{"legsmodel", new (RootFolder.Present)},
			{"missilemodel", new (RootFolder.Present)},
			{"model", new KeyParameters
			{
				default_root_folder = RootFolder.Present,
				classnames_exceptions = new Dictionary<string, Tuple<RootFolder, KeyCustomLogic>>(StringComparer.OrdinalIgnoreCase)
				{
					{"env_sprite", new (RootFolder.Dynamic, KeyCustomLogic.ProcessAsMaterial | KeyCustomLogic.Sprite)},
					{"env_sprite_clientside", new (RootFolder.Dynamic, KeyCustomLogic.ProcessAsMaterial | KeyCustomLogic.Sprite)},
					{"env_sprite_oriented", new (RootFolder.Dynamic, KeyCustomLogic.ProcessAsMaterial | KeyCustomLogic.Sprite)}
				}
			}},
			{"model_to_use", new (RootFolder.Present)},
			{"plymodel", new (RootFolder.Present)},
			{"point_allies_model", new (RootFolder.Present)},
			{"point_axis_model", new (RootFolder.Present)},
			{"point_reset_model", new (RootFolder.Present)},
			{"powerup_model", new (RootFolder.Present)},
			{"prop_model_name", new (RootFolder.Present)},
			{"shootmodel", new KeyParameters
			{
				default_root_folder = RootFolder.Present,
				extensions_exceptions = new Dictionary<string, Tuple<RootFolder, KeyCustomLogic>>(StringComparer.OrdinalIgnoreCase)
				{
					{"vmt", new (RootFolder.Dynamic, KeyCustomLogic.ProcessAsMaterial)}
				}
			}},
			{"swapmodel", new (RootFolder.Present)},
			{@"team_model_\d+", new (RootFolder.Present)},
			//{"team_model_0", new (RootFolder.Present)},
			//{"team_model_2", new (RootFolder.Present)},
			//{"team_model_3", new (RootFolder.Present)},
			{"torsomodel", new (RootFolder.Present)},
			{"turretmodel", new (RootFolder.Present)}
		};

		public static readonly char[] sound_characters =
		{
			'*',
			'#',
			'@',
			'>',
			'<',
			'^',
			')',
			'}',
			'$',
			'!',
			'?',
			'&',
			'~',
			'`',
			'+',
			'(',
			'%'
		};
		public static readonly HashList<string> sound_extensions = new HashList<string>(StringComparer.OrdinalIgnoreCase)
		{
			"wav",
			"mp3",
			"ogg",
			"flac"
		};

		public static readonly string default_notification = "Finished";
		public static readonly Version config_format_changed_since = new Version(18, 0, 0);
	}
}